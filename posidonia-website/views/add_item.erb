<%= erb :header %>
<%= erb :leaflet %>
<style>
 body {
    background-image: none;
    overflow-x:hidden;
    overflow-y:hidden;
 }
 nav {
    background-size: cover;
    z-index: 999;
    background-position: center;
    width: 100%;
    height: 100%;
    background-image:url('/Posidonia.png');
}
div nav {
    z-index: 1000;
}
</style>
</head>
<body>
<%= erb :navbar %>
<hr>

<div class="w-screen h-[100vh]" style="z-index: 1" id="map_id"></div>

</div>
<script>
    //@description: for sending polygon to backend api's.
    window.accept_sending = false;
    //@description: defitions of colors and markers;
    const redIcon = new L.Icon({
        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });

    const greenIcon = new L.Icon({
        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });

    const RED_COLOR = "#E62315";
    const GREEN_COLOR = "#4DC412";

    //@descripions: locations array for sendig backend to prepare polygons
    let locations = [];

    var setViewLatLng = new L.LatLng(38.670766, 26.746846);
    var map = L.map('map_id').setView(setViewLatLng, 9)
    let googleSat = L.tileLayer('https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
        maxZoom: 30,
        attribution: '<a href="https://github.com/yigitoo/posidonia">Posidonia Oceinaca Koruma Haritası</a> | &copy; 2024. All rights reserved.',
        subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
    });
    googleSat.addTo(map);

    async function fetch_all_locations() {
        const response = await fetch('/dumpPolygon', {
            method: "GET"
        });
        const result = await response.json();
        return result;
    }

    async function mark_all_polygons() {
        const request_infos = await fetch_all_locations();
        if (request_infos['successful'] === true) {
            const polygons = request_infos['locations'];
            for ( let polygon of polygons ) {
                    let popup = L.popup()
                                 .setContent(`Tarihinde eklendi: ${polygon['AddedTime']}.\n Ekleyen Admin: ${polygon['AddedBy']}`);

                    let is_in_danger = polygon['IsInDanger'] ? RED_COLOR : GREEN_COLOR;
                    let marker = L.polygon(polygon['Polygon'], { color: is_in_danger })
                                .bindPopup(popup)
                                .addTo(map).openPopup();
            }
            return;
        }
        window.alert('Harita verisi alınamadı, önbellek yükleniyor!')
    }

    async function get_address(lat,lng) {
        const response = await fetch('/getAddr', {
            method: "POST",
            body: JSON.stringify({
                lat: lat,
                lng: lng
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        const jsonData = await response.json();
        return jsonData;
    }

    map.on('click', async function(event) {
        let coordinates = event.latlng;
        if (coordinates) {
            let latitude = coordinates.lat;
            let longitude = coordinates.lng;

            locations.push([latitude, longitude]);
            let result = await get_address(latitude, longitude);
            let popup = L.popup()
                        .setContent(`Koordinatların, Enlem: ${latitude}, Boylam: ${longitude} | ${result['addr']}`);

            let marker =  L.marker(coordinates, { icon: greenIcon })
                            .bindPopup(popup)
                            .addTo(map).openPopup();

        } else {
            alert("Koordinatlar alınamadı!!!");
        }
    });


    async function send_region(locations_arr){
        const response = await fetch(`/addItem`, {
              method: "POST",
              body: JSON.stringify({locations: locations_arr})
            }).catch(err => console.error(err));
        const json = await response.json();
        if (json['status'] === 200)
        {
            window.location.href = '/congratulations'
        }
    }

    DetectDoubleTap(window.document.body);

    function KeyListener(event)
    {
        let key = event.key;
        if(key == "z" || key == "Z")
        {
            setTimeout(() => {
                window.accept_sending = true;
            }, 2000)
        }
    }
    let passiveSupported = false;

    try {
        const options = {
            get passive() {
            // This function will be called when the browser
            // attempts to access the passive property.
            passiveSupported = true;
            return false;
            },
        };

        window.addEventListener('load', KeyListener, options);
        window.addEventListener('load', mark_all_polygons, options)

    } catch (err) {
    passiveSupported = false;
    }
    window.document.body.onkeydown = KeyListener

    function IsItemInArray(array, item) {
        for (var i = 0; i < array.length; i++) {
            // This if statement depends on the format of your array
            if (array[i][0] == item[0] && array[i][1] == item[1]) {
                return true;   // Found it
            }
        }
        return false;   // Not found
    }

    const findIndexIn2dArray = (array, search) => array.findIndex((n) => n.every((e, i) => search[i] !== undefined && search[i] === e));

    let flag = false;

    const interval = setInterval(() => {
        if ( window.accept_sending === true && locations.length >= 3 )
        {
            let new_locations = [];
            for(let i of locations) {
                if (IsItemInArray(new_locations, i))
                {
                    continue
                } else {
                    new_locations.push(i);
                }
            }
            if (new_locations.length >= 3) { window.new_locations = new_locations; flag = true; }
            if (flag === true) clearInterval(interval)
            return;
        }
    }, 1000);

    let interval_second = setInterval(() => {
        if(flag)
        {
            send_region(window.new_locations);
            flag = false;
            clearInterval(interval_second);
        }
    },250);

</script>
</body>
</html>
